- content_for :actionbar do
  - if can? :add, Preference
    %li= link_to "Add Preference", add_preferences_path, method: :post, id: "add_preference", class: "btn btn-primary hide"
  - if can? :remove, Preference
    %li= link_to "Remove Preference", remove_preferences_path, method: :delete, id: "remove_preference", class: "btn btn-danger hide"
  - if can? :take, Duty
    %li= link_to "Take", take_rotum_duties_path(@rotum), method: :put, id: "take_duty", class: "btn btn-primary hide"
  - if can? :create, Duty
    %li= link_to "Add Duty", new_rotum_duty_path(@rotum), class: "btn btn-primary"
  - if @rotum.published?
    - if can? :unpublish, @rotum
      %li= link_to "Unpublish", unpublish_rotum_path(@rotum), method: :put, class: "btn btn-primary"
  - elsif @rotum.assigned?
    - if can? :publish, @rotum
      %li= link_to "Publish", publish_rotum_path(@rotum), method: :put, class: "btn btn-primary"
    - if can? :unassign, @rotum
      %li= link_to "Unassign Duties", unassign_rotum_path(@rotum), method: :put, confirm: "Are you sure?", class: "btn btn-danger"
  - else
    - if can? :assign, @rotum
      %li= link_to "Assign Duties", assign_rotum_path(@rotum), method: :put, class: "btn btn-primary"
  - if can? :destroy, @rotum
    %li= link_to_destroy(@rotum)

- content_for :infobar do
  %li
    Select duties using the checkboxes to do something with them:
    %br
    %strong Add Preference
    to request that a duty is not assigned to you or let others take it from you
    %br
    %strong Take
    a duty that another person can't do
  %li.divider
  %li.alert-success.alert
    %strong Green:
    This duty has been assigned to you
  %li.divider
  %li.alert-info.alert
    %strong Blue:
    You've asked not to do this duty
  %li.divider
  %li.alert-error.alert
    %strong Red:
    You've asked not to do this duty but it's been assigned to you anyway (Sorry!)
  %li.divider
  %li.alert
    %strong Orange:
    Another person has asked not to do this duty but it's been assigned to them anyway. Help them out by taking it from them.

.center
  = header_for_show(@rotum)
  %h2.nav
    = link_to_if @rotum.previous.present?, "<<", @rotum.previous
    = link_to_unless current_page?(rotum_duties_path("current")), "Current", rotum_duties_path("current")
    = link_to_if @rotum.next.present?, ">>", @rotum.next

- if can? :manage, Rotum
  %h3 Duties / Preferences Summary
  %table.table.datatable{ data: { paginate: "false", info: "false", filter: "false" } }
    %thead
      %tr
        %th Name
        - Date::DAYNAMES.each do |day|
          %th= day
        %th Total
        %th Weighted Total
    %tbody
      - @users.each do |user|
        - submitted = user.preferences.any? { |p| p.duty.rotum == @rotum }
        %tr{ class: (submitted ? "success" : "error") }
          %td= user.name
          - Date::DAYNAMES.each do |day|
            - duty_count = user.duties.select do |duty|
              - Date::DAYNAMES[duty.day.wday] == day
            - end.size
            - preference_count = user.preferences.select do |preference|
              - Date::DAYNAMES[preference.duty.day.wday] == day
            - end.size
            %td= "#{duty_count} / #{preference_count}"
          %td= "#{user.duties.size} / #{user.preferences.size}"
          %td= user.duty_weight

%table.table.datatable{ data: { paginate: "false", sort: "false" } }
  %thead
    %tr
      - if can?([:add, :remove], Preference) || can?(:take, Duty)
        %th.actions= check_box_tag "check_all"
      %th.right Date
      %th Time
      %th Name
      - if can? :manage, Rotum
        %th Preferences
  %tbody
    - @duties.each do |duty|
      - if can? :add, Preference
        - preference = current_user.find_preference_by_duty duty
      - assigned = duty.users.select { |user| user  == current_user }
      - other_conflict = duty.users.select { |user| user.find_preference_by_duty(duty) }
      - klass = ''
      - if preference.present?
        - klass = 'alert alert-info'
      - if @rotum.published? || can?(:manage, Rotum)
        - if assigned.present? && preference.present?
          - klass = 'alert alert-error'
        - elsif assigned.present?
          - klass = 'alert alert-success'
        - elsif other_conflict.present?
          - klass = 'alert conflict'
      - if preference.present?
        - klass += ' preference'
      - if duty.day.today?
        - klass += ' today'
      %tr{ class: klass }
        - if can?([:add, :remove], Preference) || can?(:take, Duty)
          %td.actions= check_box_tag "ids[]", duty.id, false, class: 'check_group'
        - if can? :read, Duty
          %td.right= link_to duty.day_str, rotum_duty_path(@rotum, duty)
        - else
          %td.right= duty.day_str
        %td= duty.times_str
        - if duty.users.empty? || (!@rotum.published? && cannot?(:manage, Rotum))
          %td Unassigned
        - else
          %td= duty.users.map { |user| user.name }.join(", ")
        - if can? :manage, Rotum
          - if duty.preferences.empty?
            %td None
          - else
            %td= duty.preferences.map { |p| p.user.name }.join(", ")
