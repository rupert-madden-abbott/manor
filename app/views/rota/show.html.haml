- if current_user.can?(Rotum, :update, :delete)
  - content_for :actionbar do
    - if current_user.can_update? Rotum
      - if @rotum.assigned?
        - if @rotum.published?
          = link_to "Unpublish", unpublish_rotum_path(@rotum), method: :put, class: "btn btn-primary"
        - else
          = link_to "Publish", publish_rotum_path(@rotum), method: :put, class: "btn btn-primary"
        = link_to "Unassign Duties", unassign_rotum_path(@rotum), method: :put, confirm: "Are you sure?", class: "btn btn-warning"
      - else
        = link_to "Assign Duties", assign_rotum_path(@rotum), method: :put, class: "btn btn-primary"
    - if current_user.can_delete? Rotum
      = link_to_destroy(@rotum)

- content_for :infobar do
  %li
    Click
    %strong Add Preference
    to request that a duty is not assigned to you or to let other senior residents know that you can't do a duty already assigned to you
  %li.divider
  %li.alert-success.alert
    %strong Green:
    This duty has been assigned to you
  %li.divider
  %li.alert-error.alert
    %strong Red:
    You've asked not to do this duty but it's been assigned to you anyway (Sorry!)
  %li.divider
  %li.alert
    %strong Orange:
    Another Senior Resident has asked not to do this duty but it's been assigned to them anyway. Help them out by offering to swap!

.center
  = header_for_show(@rotum)
  %h2
    = link_to_if @previous_rotum, "<<", @previous_rotum
    = link_to("Current Rota", rotum_path("current"))
    = link_to_if @next_rotum, ">>", @next_rotum

- if current_user.can? Rotum, :update, :delete
  %table.table.table-striped
    %thead
      %tr
        %th Name
        - Date::DAYNAMES.each do |day|
          %th= day
        %th Total
        %th Weighted Total
    %tbody
      - User.for_assignment.each do |user|
        %tr
          %td= user.name
          - Date::DAYNAMES.each do |day|
            %td= user.duties.select { |duty| Date::DAYNAMES[duty.day.wday] == day }.count
          %td= user.duties.size
          %td= user.duty_weight

%table.table
  %thead
    %tr
      %th Date
      %th Time
      %th Name
      - if current_user.can?(Rotum, :update, :delete)
        %th Preferences
      %th Actions
  %tbody
    - @rotum.duties.includes(preferences: :user).order(:day).each do |duty|
      - if current_user.can?(Preference, :create, :delete)
        - preference = current_user.find_preference_by_duty duty
      - assigned = duty.users.select { |user| user  == current_user }
      - other_conflict = duty.users.select { |user| user.find_preference_by_duty(duty) }
      - klass = ''
      - if @rotum.published? || current_user.has_role?(:dw)
        - if assigned.present? && preference.present?
          - klass = 'alert alert-error'
        - elsif assigned.present?
          - klass = 'alert alert-success'
        - elsif other_conflict.present?
          - klass = 'alert'
      %tr{ class: klass }
        %td= duty.day_str
        %td= duty.times_str
        - if duty.users.empty? || (!@rotum.published? && !current_user.has_role?(:dw))
          %td Unassigned
        - else
          %td= duty.users.map { |user| user.name }.join(", ")
        - if current_user.can?(Rotum, :update, :delete)
          - preferences = duty.preferences
          - if preferences.empty?
            %td None
          - else
            %td= preferences.map { |p| p.user.name }.join(", ")
        %td
          - if preference.present?
            = link_to_destroy(preference, "Remove Preference")
          - elsif current_user.can_create?(Preference)
            = simple_form_for Preference.new do |f|
              = f.association :user, as: :hidden, input_html: { value: current_user.id }
              = f.association :duty, as: :hidden, input_html: { value: duty.id }
              = f.submit "Add Preference", class: 'btn btn-mini btn-primary'
